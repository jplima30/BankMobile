//
//  LoginInteractor.swift
//  DesafioAppBank
//
//  Created by jplima on 09/01/21.
//  Copyright (c) 2021 jplima. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func signIn(request: Login.UserLogin.Request)
    func populateDataStoreUserAccount(userAccount: UserAccount?)
    func processarAlgo(request: String)
}

protocol LoginDataStore {
    var userAccount: UserAccount? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    var userAccount: UserAccount?
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    
    func signIn(request: Login.UserLogin.Request) {
        
        worker = LoginWorker()
        worker?.signIn(user: request.user, password: request.password, completion: { (result) in
            switch result {
                
            case .success(let user):
                if user.error?.code == nil {
                    let response = Login.UserLogin.Response(userSigned: true, userAccount: user.userAccount)
                    self.presenter?.presentDetails(response: response)
                }
                
            case .failure(let error):
                print(error)
                self.presenter?.presentError(message: error.localizedDescription)
            }
        })
    }
    
    func populateDataStoreUserAccount(userAccount: UserAccount?) {
        self.userAccount = userAccount
    }
    
    func processarAlgo(request: String) {
        let response = request + "Importante"
        presenter?.formatarAlgo(response: response)
    }
}

    
